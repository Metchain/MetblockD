// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: proto/utxo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UTXOsClient is the client API for UTXOs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UTXOsClient interface {
	UTXOStream(ctx context.Context, opts ...grpc.CallOption) (UTXOs_UTXOStreamClient, error)
	NFTStream(ctx context.Context, opts ...grpc.CallOption) (UTXOs_NFTStreamClient, error)
	VWalletStream(ctx context.Context, opts ...grpc.CallOption) (UTXOs_VWalletStreamClient, error)
	WalletBalanceStream(ctx context.Context, opts ...grpc.CallOption) (UTXOs_WalletBalanceStreamClient, error)
	UTXOAddress(ctx context.Context, opts ...grpc.CallOption) (UTXOs_UTXOAddressClient, error)
	WalletBalancesStream(ctx context.Context, opts ...grpc.CallOption) (UTXOs_WalletBalancesStreamClient, error)
}

type uTXOsClient struct {
	cc grpc.ClientConnInterface
}

func NewUTXOsClient(cc grpc.ClientConnInterface) UTXOsClient {
	return &uTXOsClient{cc}
}

func (c *uTXOsClient) UTXOStream(ctx context.Context, opts ...grpc.CallOption) (UTXOs_UTXOStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UTXOs_ServiceDesc.Streams[0], "/proto.UTXOs/UTXOStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &uTXOsUTXOStreamClient{stream}
	return x, nil
}

type UTXOs_UTXOStreamClient interface {
	Send(*UTXOResponse) error
	Recv() (*UTXOResponse, error)
	grpc.ClientStream
}

type uTXOsUTXOStreamClient struct {
	grpc.ClientStream
}

func (x *uTXOsUTXOStreamClient) Send(m *UTXOResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uTXOsUTXOStreamClient) Recv() (*UTXOResponse, error) {
	m := new(UTXOResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uTXOsClient) NFTStream(ctx context.Context, opts ...grpc.CallOption) (UTXOs_NFTStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UTXOs_ServiceDesc.Streams[1], "/proto.UTXOs/NFTStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &uTXOsNFTStreamClient{stream}
	return x, nil
}

type UTXOs_NFTStreamClient interface {
	Send(*NFTRequest) error
	Recv() (*NFTResponse, error)
	grpc.ClientStream
}

type uTXOsNFTStreamClient struct {
	grpc.ClientStream
}

func (x *uTXOsNFTStreamClient) Send(m *NFTRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uTXOsNFTStreamClient) Recv() (*NFTResponse, error) {
	m := new(NFTResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uTXOsClient) VWalletStream(ctx context.Context, opts ...grpc.CallOption) (UTXOs_VWalletStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UTXOs_ServiceDesc.Streams[2], "/proto.UTXOs/VWalletStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &uTXOsVWalletStreamClient{stream}
	return x, nil
}

type UTXOs_VWalletStreamClient interface {
	Send(*VWalletRequest) error
	Recv() (*VWalletResponse, error)
	grpc.ClientStream
}

type uTXOsVWalletStreamClient struct {
	grpc.ClientStream
}

func (x *uTXOsVWalletStreamClient) Send(m *VWalletRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uTXOsVWalletStreamClient) Recv() (*VWalletResponse, error) {
	m := new(VWalletResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uTXOsClient) WalletBalanceStream(ctx context.Context, opts ...grpc.CallOption) (UTXOs_WalletBalanceStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UTXOs_ServiceDesc.Streams[3], "/proto.UTXOs/WalletBalanceStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &uTXOsWalletBalanceStreamClient{stream}
	return x, nil
}

type UTXOs_WalletBalanceStreamClient interface {
	Send(*WalletBalanceRequest) error
	Recv() (*WalletBalanceRespose, error)
	grpc.ClientStream
}

type uTXOsWalletBalanceStreamClient struct {
	grpc.ClientStream
}

func (x *uTXOsWalletBalanceStreamClient) Send(m *WalletBalanceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uTXOsWalletBalanceStreamClient) Recv() (*WalletBalanceRespose, error) {
	m := new(WalletBalanceRespose)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uTXOsClient) UTXOAddress(ctx context.Context, opts ...grpc.CallOption) (UTXOs_UTXOAddressClient, error) {
	stream, err := c.cc.NewStream(ctx, &UTXOs_ServiceDesc.Streams[4], "/proto.UTXOs/UTXOAddress", opts...)
	if err != nil {
		return nil, err
	}
	x := &uTXOsUTXOAddressClient{stream}
	return x, nil
}

type UTXOs_UTXOAddressClient interface {
	Send(*UTXOAddressRequest) error
	Recv() (*UTXOAddressResponse, error)
	grpc.ClientStream
}

type uTXOsUTXOAddressClient struct {
	grpc.ClientStream
}

func (x *uTXOsUTXOAddressClient) Send(m *UTXOAddressRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uTXOsUTXOAddressClient) Recv() (*UTXOAddressResponse, error) {
	m := new(UTXOAddressResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uTXOsClient) WalletBalancesStream(ctx context.Context, opts ...grpc.CallOption) (UTXOs_WalletBalancesStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UTXOs_ServiceDesc.Streams[5], "/proto.UTXOs/WalletBalancesStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &uTXOsWalletBalancesStreamClient{stream}
	return x, nil
}

type UTXOs_WalletBalancesStreamClient interface {
	Send(*WalletBalancesRequest) error
	Recv() (*WalletBalancesRespose, error)
	grpc.ClientStream
}

type uTXOsWalletBalancesStreamClient struct {
	grpc.ClientStream
}

func (x *uTXOsWalletBalancesStreamClient) Send(m *WalletBalancesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uTXOsWalletBalancesStreamClient) Recv() (*WalletBalancesRespose, error) {
	m := new(WalletBalancesRespose)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UTXOsServer is the server API for UTXOs service.
// All implementations must embed UnimplementedUTXOsServer
// for forward compatibility
type UTXOsServer interface {
	UTXOStream(UTXOs_UTXOStreamServer) error
	NFTStream(UTXOs_NFTStreamServer) error
	VWalletStream(UTXOs_VWalletStreamServer) error
	WalletBalanceStream(UTXOs_WalletBalanceStreamServer) error
	UTXOAddress(UTXOs_UTXOAddressServer) error
	WalletBalancesStream(UTXOs_WalletBalancesStreamServer) error
	mustEmbedUnimplementedUTXOsServer()
}

// UnimplementedUTXOsServer must be embedded to have forward compatible implementations.
type UnimplementedUTXOsServer struct {
}

func (UnimplementedUTXOsServer) UTXOStream(UTXOs_UTXOStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UTXOStream not implemented")
}
func (UnimplementedUTXOsServer) NFTStream(UTXOs_NFTStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method NFTStream not implemented")
}
func (UnimplementedUTXOsServer) VWalletStream(UTXOs_VWalletStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method VWalletStream not implemented")
}
func (UnimplementedUTXOsServer) WalletBalanceStream(UTXOs_WalletBalanceStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WalletBalanceStream not implemented")
}
func (UnimplementedUTXOsServer) UTXOAddress(UTXOs_UTXOAddressServer) error {
	return status.Errorf(codes.Unimplemented, "method UTXOAddress not implemented")
}
func (UnimplementedUTXOsServer) WalletBalancesStream(UTXOs_WalletBalancesStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WalletBalancesStream not implemented")
}
func (UnimplementedUTXOsServer) mustEmbedUnimplementedUTXOsServer() {}

// UnsafeUTXOsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UTXOsServer will
// result in compilation errors.
type UnsafeUTXOsServer interface {
	mustEmbedUnimplementedUTXOsServer()
}

func RegisterUTXOsServer(s grpc.ServiceRegistrar, srv UTXOsServer) {
	s.RegisterService(&UTXOs_ServiceDesc, srv)
}

func _UTXOs_UTXOStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UTXOsServer).UTXOStream(&uTXOsUTXOStreamServer{stream})
}

type UTXOs_UTXOStreamServer interface {
	Send(*UTXOResponse) error
	Recv() (*UTXOResponse, error)
	grpc.ServerStream
}

type uTXOsUTXOStreamServer struct {
	grpc.ServerStream
}

func (x *uTXOsUTXOStreamServer) Send(m *UTXOResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uTXOsUTXOStreamServer) Recv() (*UTXOResponse, error) {
	m := new(UTXOResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UTXOs_NFTStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UTXOsServer).NFTStream(&uTXOsNFTStreamServer{stream})
}

type UTXOs_NFTStreamServer interface {
	Send(*NFTResponse) error
	Recv() (*NFTRequest, error)
	grpc.ServerStream
}

type uTXOsNFTStreamServer struct {
	grpc.ServerStream
}

func (x *uTXOsNFTStreamServer) Send(m *NFTResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uTXOsNFTStreamServer) Recv() (*NFTRequest, error) {
	m := new(NFTRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UTXOs_VWalletStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UTXOsServer).VWalletStream(&uTXOsVWalletStreamServer{stream})
}

type UTXOs_VWalletStreamServer interface {
	Send(*VWalletResponse) error
	Recv() (*VWalletRequest, error)
	grpc.ServerStream
}

type uTXOsVWalletStreamServer struct {
	grpc.ServerStream
}

func (x *uTXOsVWalletStreamServer) Send(m *VWalletResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uTXOsVWalletStreamServer) Recv() (*VWalletRequest, error) {
	m := new(VWalletRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UTXOs_WalletBalanceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UTXOsServer).WalletBalanceStream(&uTXOsWalletBalanceStreamServer{stream})
}

type UTXOs_WalletBalanceStreamServer interface {
	Send(*WalletBalanceRespose) error
	Recv() (*WalletBalanceRequest, error)
	grpc.ServerStream
}

type uTXOsWalletBalanceStreamServer struct {
	grpc.ServerStream
}

func (x *uTXOsWalletBalanceStreamServer) Send(m *WalletBalanceRespose) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uTXOsWalletBalanceStreamServer) Recv() (*WalletBalanceRequest, error) {
	m := new(WalletBalanceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UTXOs_UTXOAddress_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UTXOsServer).UTXOAddress(&uTXOsUTXOAddressServer{stream})
}

type UTXOs_UTXOAddressServer interface {
	Send(*UTXOAddressResponse) error
	Recv() (*UTXOAddressRequest, error)
	grpc.ServerStream
}

type uTXOsUTXOAddressServer struct {
	grpc.ServerStream
}

func (x *uTXOsUTXOAddressServer) Send(m *UTXOAddressResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uTXOsUTXOAddressServer) Recv() (*UTXOAddressRequest, error) {
	m := new(UTXOAddressRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UTXOs_WalletBalancesStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UTXOsServer).WalletBalancesStream(&uTXOsWalletBalancesStreamServer{stream})
}

type UTXOs_WalletBalancesStreamServer interface {
	Send(*WalletBalancesRespose) error
	Recv() (*WalletBalancesRequest, error)
	grpc.ServerStream
}

type uTXOsWalletBalancesStreamServer struct {
	grpc.ServerStream
}

func (x *uTXOsWalletBalancesStreamServer) Send(m *WalletBalancesRespose) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uTXOsWalletBalancesStreamServer) Recv() (*WalletBalancesRequest, error) {
	m := new(WalletBalancesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UTXOs_ServiceDesc is the grpc.ServiceDesc for UTXOs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UTXOs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UTXOs",
	HandlerType: (*UTXOsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UTXOStream",
			Handler:       _UTXOs_UTXOStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "NFTStream",
			Handler:       _UTXOs_NFTStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "VWalletStream",
			Handler:       _UTXOs_VWalletStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WalletBalanceStream",
			Handler:       _UTXOs_WalletBalanceStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UTXOAddress",
			Handler:       _UTXOs_UTXOAddress_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "WalletBalancesStream",
			Handler:       _UTXOs_WalletBalancesStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/utxo.proto",
}
