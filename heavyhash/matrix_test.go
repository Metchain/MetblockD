package heavyhash

import (
	"testing"
)

func TestNewMatrix(t *testing.T) {
	tests := []struct {
		state [4]uint64
		first [64]uint16
		last  [64]uint16
	}{
		{
			state: [4]uint64{
				0,
				0,
				0,
				1,
			},
			first: [64]uint16{
				0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x1, 0x1, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
				0x1, 0x1, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x2, 0x0, 0x0, 0x0,
				0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x4, 0x4, 0x0, 0x0, 0x0, 0x2, 0x2, 0x0, 0x0, 0x0,
			},
			last: [64]uint16{
				0x8, 0x7, 0x8, 0x7, 0x7, 0x5, 0xf, 0x8, 0x2, 0x0, 0x6, 0x5, 0x3, 0x4, 0x5, 0x4,
				0x8, 0x4, 0x9, 0x9, 0x2, 0x5, 0x2, 0x0, 0x2, 0xc, 0x3, 0x7, 0x7, 0x7, 0xa, 0xb,
				0xa, 0x5, 0x7, 0x3, 0xb, 0xe, 0xe, 0x9, 0x3, 0x5, 0xe, 0x4, 0x0, 0xd, 0x7, 0x9,
				0xf, 0x9, 0x8, 0x9, 0x0, 0x4, 0x7, 0x4, 0x7, 0x4, 0x9, 0x8, 0x6, 0x8, 0x1, 0xa,
			},
		},
		{
			state: [4]uint64{
				124123,
				591204,
				959691,
				959109,
			},
			first: [64]uint16{
				0xb, 0xd, 0x4, 0xe, 0x1, 0x0, 0x0, 0xb, 0x3, 0x4, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0,
				0xa, 0x4, 0x1, 0xc, 0x0, 0x8, 0xd, 0x9, 0x1, 0x2, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0,
				0xd, 0xa, 0xb, 0xd, 0xe, 0x5, 0x7, 0x2, 0x3, 0x0, 0x0, 0x2, 0xe, 0xb, 0x4, 0x4,
				0xb, 0x5, 0xf, 0xc, 0x9, 0xd, 0x2, 0x8, 0x6, 0x0, 0xb, 0x0, 0x4, 0x0, 0xe, 0x0,
			},
			last: [64]uint16{
				0x1, 0x9, 0x3, 0x4, 0x0, 0x6, 0x7, 0xe, 0xa, 0xd, 0xd, 0x6, 0x9, 0x6, 0xa, 0x0,
				0x1, 0x3, 0x0, 0x7, 0x6, 0xd, 0x0, 0x7, 0xf, 0x8, 0x8, 0x7, 0x1, 0x2, 0x0, 0x8,
				0x9, 0x0, 0x4, 0x4, 0xb, 0xd, 0x9, 0x8, 0xa, 0x4, 0x8, 0x1, 0x2, 0x3, 0x6, 0x2,
				0x5, 0x8, 0x4, 0x0, 0xd, 0xe, 0x6, 0x6, 0x9, 0xc, 0x0, 0x3, 0x7, 0xd, 0xa, 0x0,
			},
		},
		{
			state: [4]uint64{
				59013294024,
				99520455,
				512351,
				9599690203505,
			},
			first: [64]uint16{
				0xc, 0xc, 0x7, 0x6, 0x7, 0xf, 0x9, 0x5, 0x2, 0xb, 0xb, 0xc, 0xb, 0x6, 0x4, 0x6,
				0x2, 0xe, 0x4, 0xf, 0xc, 0x9, 0x0, 0x6, 0xd, 0x6, 0x7, 0xd, 0x1, 0x5, 0xb, 0x5,
				0x7, 0x1, 0xa, 0xe, 0xb, 0xb, 0xb, 0x9, 0x0, 0x4, 0x1, 0x5, 0x0, 0xd, 0x8, 0x6,
				0x1, 0x6, 0xc, 0xb, 0xe, 0x5, 0x6, 0xb, 0x1, 0xb, 0xf, 0x6, 0xd, 0x1, 0x1, 0xf,
			},
			last: [64]uint16{
				0x7, 0xd, 0x5, 0x5, 0x1, 0x7, 0xf, 0xd, 0x9, 0xa, 0xb, 0xe, 0x3, 0x9, 0x5, 0x2,
				0x6, 0x5, 0x6, 0x6, 0x2, 0x9, 0x3, 0x2, 0x0, 0x0, 0xf, 0xd, 0x9, 0x8, 0x9, 0x2,
				0x9, 0x6, 0x7, 0x0, 0xf, 0xd, 0x2, 0x2, 0x6, 0x5, 0x3, 0x6, 0xc, 0xe, 0xd, 0x7,
				0xc, 0xd, 0x2, 0xa, 0x7, 0x9, 0xe, 0x7, 0x3, 0xb, 0x3, 0x3, 0x4, 0xc, 0x9, 0x7,
			},
		},
	}

	for i, tt := range tests {
		mat := newMatrix(tt.state[0], tt.state[1], tt.state[2], tt.state[3])
		for j := range mat[0] {
			if mat[0][j] != tt.first[j] {
				t.Errorf("failed on %d: mat[0][%d]: have %d, want %d", i, j, mat[0][j], tt.first[j])
			}
		}

		for j := range mat[len(mat)-1] {
			if mat[len(mat)-1][j] != tt.last[j] {
				t.Errorf("failed on %d: mat[%d][%d]: have %d, want %d", i, len(mat)-1, j, mat[len(mat)-1][j], tt.last[j])
			}
		}
	}
}
